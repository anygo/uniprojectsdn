
public class BinarySearch {
	
	public static int binSearch(int[] sortedArr, int key) {
		return searchRec(sortedArr, key, 0, sortedArr.length-1);
	}

	public static int searchRec(int[] sortedArr, int key, int firsti, int lasti) {
		if (firsti == lasti && sortedArr[lasti] != key) return -1;
		int tmpi = (firsti + lasti)/2;
		if (sortedArr[tmpi] == key) return tmpi;
		if (key > sortedArr[tmpi]) return searchRec(sortedArr, key, tmpi+1, lasti);
		else return searchRec(sortedArr, key, firsti, tmpi-1);
	}

	public static int normSearch(int[] sortedArr, int key) {
		for (int i = 0; i < sortedArr.length; i++) {
			if (sortedArr[i] == key) return i;
		}
		return -1;
	}

	public static void printArr(int[] arr) {
		for (int i = 0; i < arr.length; i++) System.out.print(arr[i] + " ");
		System.out.println();
	}

	public static void main(String[] args) {
		try {
		System.out.println("sleep");
		Thread.sleep(5000);
		System.out.println("endsleep");
		} catch (Exception e) {;}
		int size = Integer.parseInt(args[0]);
		int[] arr = new int[size];
		for (int i = 0; i<size; i++) arr[i] = 2*i;
		
		long durchschnitt = 0;
		for (int i = 0; i < 10000; i++) {
			long stime = System.nanoTime();
			binSearch(arr, Integer.parseInt(args[1]));
			long etime = System.nanoTime();
			durchschnitt += (etime-stime);
		}
		System.out.println("\n\nDurchschnitt (binSearch): " + durchschnitt/10000);
		long durchschnitt2 = 0;
		for (int i = 0; i < 10000; i++) {
			long stime = System.nanoTime();
			normSearch(arr, Integer.parseInt(args[1]));
			long etime = System.nanoTime();
			durchschnitt2 += (etime-stime);
		}
		System.out.println("\n\nDurchschnitt (normSearch): " + durchschnitt2/10000);
		System.out.println("\nnorm/bin: " + (float)durchschnitt2/durchschnitt);
	}
}
