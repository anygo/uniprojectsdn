Aufgabe c) 
1) sizeof(char): evt. problematisch, da Memset eine Angabe in byte erhaelt. Man sollte nicht davon ausgehen, dass char 1 Byte gross ist.
2) for(i=0; i<5; i++) : fuer addr[5] wird nie Speicher allokiert, aber auf addr[5] wird zugegriffen und der Bereich soll auch "gefreed" werden, wobei es zum Absturz kommt
3) Strings sind teilweise lÃ¤nger als 16 Zeichen (man beachte auch das Terminierungszeichen)
	-> Es wird zum Beispiel in Zeile 16 ueber die Grenzen hinausgeschrieben und somit die Verwaltungsstruktur des darauf folgenden Speichers zerstoert 
4) addr[2] wird freigegeben, danach wir aber wieder auf den freigegebenen Speicher zugegriffen (erst schreibend, dann lesend)
5) genauso bei addr[4]
6) im Fehlerfall wird das Programm beendet, ohne den allokierten Speicher freizugeben

Im Bezug auf unsere Implementierung von malloc und co. ist v.a.  3) problematisch, weil (wie oben schon beschrieben) eventuell Verwaltungsstrukturen ueberschrieben werden. 

Hier ein Beispiel im Aufruf von free(addr[1]):

(gdb) p (char*)fsp
$14 = 0x804a018 = "ann"

das ist der Rest von Mustermann, sollte aber eigtl die Verwaltungs-Struktur sein -> kaputt!

Wenn man Pech hat, ueberschreibt man wegen 2) und 3) wichtigen (im Sinne von: wird von anderen Teilen des Programms benoetigt) Speicher.



Aufgabe d) 
Unsere Loesung funktioniert, da in unserer Implementierung die mblock-Strukturen in der Speicherverwaltung grundsaetzlich an durch sizeof(struct mblock)-teilbaren (8 Byte bei 32-Bit-Rechnern) Speicherstellen beginnen und die Groesse sizeof(struct mblock) besitzen.
Folglich ist auch das Alignment bei int-Werten der Groesse sizeof(int) (4 Byte auf 32-Bit-Rechnern) korrekt (sogar das Alignment fuer 8-Byte-Datentypen waere in diesem Fall noch korrekt) 
=> Implementierung macht auch auf Architekturen wie SPARC, die korrektes Alignment von int-Werten voraussetzen, keine Probleme.
