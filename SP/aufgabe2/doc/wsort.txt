qsort erwartet als 4. Parameter einen Pointer auf eine Funktion (compar), die 
folgende "Eigenschaften" erfuellt:
	int(*compar)(const void *, const void *)
Also eine Funktion, die als Parameter 2 Pointer auf Pointer (auf char(-Array)s) 
und als Return-Wert einen int-Wert zurueckgibt.

Ich benutze in meiner Implementierung strcmp:
	int strcmp(const char *s1, const char *s2)
Diese Funktion erwartet 2 Pointer auf char(-Arrays), die miteinander verglichen
werden sollen und gibt einen int-Wert zurueck.

Also musste ein Funktions-"Wrapper" geschrieben werden, der sozusagen 
strcmp zu qsort kompatibel macht: 
	static int mystrcmp(const void *p1, const void *p2)
Diese Funktion erfuellt die Anforderungen zum Aufruf mit qsort()
	return strcmp(* (char * const *) p1, * (char * const *) p2);
Hier werden die uebergebenen Parameter fuer den Aufruf von strcmp
dereferenziert (*) und anschliessend noch gecastet (char * const *),
sodass die Funktion ohne Errors und Warnings kompiliert und aufgerufen
werden kann.

Desweiteren will qsort als Parameter einen Pointer (void *base) auf ein
Array von Pointern, die auf die zu sortierenden Elemente (hier char-Arrays)
zeigen. Hierzu liesst readInput() die Daten von stdin ein und speichert
die Zeichen einzeln per fgetc in ein dynamisches "2D-Array". Sobald
ein \n gelesen wird, schreibt die Funktion ein \0 an die n√§chste Stelle 
im Array (String-Ende) und beginnt eine neue "Zeile", bis keine Eingabedaten
mehr zur Verfuegung stehen (EOF).
Leere Zeilen werden ignoriert, genauso wie auch Zeilen, die laenger als 100
Zeichen sind.

Der 2. Parameter nmemb wird auch gleich beim Einlesen ermittelt, hierzu
die static-Variable strCount.

Der 3. Parameter gibt die Groesse der Elemente des base-Arrays an,
in unserem Fall sizeof(char *), da das Array aus Pointern auf 
char(-Array)s besteht.
